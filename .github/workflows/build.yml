name: orchestrator-pipeline-build
on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'information'
        type: choice
        options:
          - information
          - debug
          - warning
          - critical
      tags:
        description: 'Purpose of Run This Workflow?'
        required: true
        type: string

jobs:
  # Build stage
  maven-build:
    name: maven-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 21
          cache: 'maven'

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Extract project version and artifact ID
        run: |
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -Dmvn.repo.local=$HOME/.m2/repository)
            ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -Dmvn.repo.local=$HOME/.m2/repository)
            echo "VERSION=$VERSION" >> $GITHUB_ENV  
            echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV

      - name: Maven clean install
        run: mvn clean install
      #- name: Cache SonarQube packages
      #  uses: actions/cache@v1
      #  with:
       #          path: ~/.sonar/cache
       #          key: ${{ runner.os }}-sonar
        #         restore-keys: ${{ runner.os }}-sonar
      #- name: Build and analyze
      #  env:
      #      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #  run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

      - name: Cache built JAR
        uses: actions/cache@v3
        with:
          path: target/
          key: ${{ runner.os }}-jar-${{ hashFiles('target/*.jar') }}
          restore-keys: ${{ runner.os }}-jar-



  sast:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job will be run first, in parallel with build_a"

  spotbugs-sast:
    runs-on: ubuntu-latest
    needs: [maven-build]
    steps:
      - run: echo "This job will run after build_a and build_b have finished"

  secret_detection:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job will be run first, in parallel with build_a"

  sonarqube-check:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job will be run first, in parallel with build_a"

  deploy-okd-develop:
    name: Deploy to OKD Develop
    runs-on: ubuntu-latest

    container: beprimetech/docker:stable-git

    steps:
        - uses: actions/checkout@v3  # Checkout code from your repository
        - name: Copy artifacts
          run: echo " target.jar"
        - name: Extract version from pom.xml
          run: |
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -Dmvn.repo.local=$HOME/.m2/repository)
            ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -Dmvn.repo.local=$HOME/.m2/repository)
            echo "VERSION=$VERSION" >> $GITHUB_ENV  
            echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
  

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job will be run first, in parallel with build_a"

  build_push_gcr-stage:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job will be run first, in parallel with build_a"

  build-maven-stage:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job will be run first, in parallel with build_a"

  deploy-to-stage:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job will be run first, in parallel with build_a"

  deploy-to-production:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job will be run first, in parallel with build_a"
